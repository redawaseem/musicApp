{"version":3,"sources":["iphoneVectorMain.png","firebase.js","Components/Header.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","Component","Footer","href","App","handleChange","event","setState","userInput","target","value","scrollToMyRef","window","scrollTo","myRef","current","offsetTop","handleClick","preventDefault","state","database","ref","push","swal","handleRemove","dataKey","child","remove","datas","React","createRef","on","response","newState","data","val","key","jam","action","htmlFor","placeholder","id","onChange","this","onClick","map","src","iphoneVectorMain","alt","class","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,8C,4NCazCC,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,gBACnBC,MAAO,+CAKMR,QAAf,ECGaS,E,uKAdP,OACI,gCACI,yBAAKC,UAAU,iBACX,2DAA2B,yBAAKA,UAAU,SAAf,2BAC3B,yMACJ,yBAAKA,UAAU,QACX,uBAAGA,UAAU,2C,GARZC,aCYNC,E,uKAVP,OACI,gCACI,yBAAKF,UAAU,kBACX,yCAAc,8BAAM,uBAAGG,KAAK,6BAAR,gBAApB,OAAkF,8BAAM,uBAAGA,KAAK,4BAAR,wB,GALvFF,a,kCC6ING,E,kDA/Hb,aAAe,IAAD,8BACZ,gBAmCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAtCd,EA2CdC,cAAgB,WACdC,OAAOC,SAAS,EAAG,EAAKC,MAAMC,QAAQC,YA5C1B,EAiDdC,YAAc,SAACX,IACbA,EAAMY,iBAGuB,KAAzB,EAAKC,MAAMX,YAEClB,EAAS8B,WAAWC,MAE5BC,KAAK,EAAKH,MAAMX,WAEtB,EAAKD,SAAS,CACZC,UAAU,KAGZ,EAAKG,iBAGLY,IAAK,yFAlEK,EAwEdC,aAAe,SAACC,GAEAnC,EAAS8B,WAAWC,MAE5BK,MAAMD,GAASE,UA1ErB,EAAKR,MAAQ,CAEXX,UAAW,GACXoB,MAAO,IAGT,EAAKd,MAAQe,IAAMC,YARP,E,gEAYO,IAAD,OACJxC,EAAS8B,WAAWC,MAE5BU,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAW,GAEXC,EAAOF,EAASG,MAEtB,IAAK,IAAMC,KAAOF,EAChBD,EAASX,KAAK,CACZc,IAAKA,EACLC,IAAKH,EAAKE,KAKd,EAAK7B,SAAS,CACZqB,MAAOK,S,+BAiDH,IAAD,OACP,OACE,yBAAKjC,UAAU,OAEb,kBAAC,EAAD,MAEA,6BAASA,UAAU,WACjB,yBAAKA,UAAU,WACb,0BAAMA,UAAU,SAASsC,OAAO,IAE9B,2BAAOC,QAAQ,aAEf,8BAAUC,YAAY,oCAAoCC,GAAG,SAASC,SAAUC,KAAKtC,aAAcK,MAAOiC,KAAKxB,MAAMX,YAErH,4BAAQR,UAAU,MAAM4C,QAASD,KAAK1B,aAAtC,eAIA,wBAAII,IAAKsB,KAAK7B,MAAOd,UAAU,iBAC5B2C,KAAKxB,MAAMS,MAAMiB,KAAI,SAACX,GACrB,OACE,wBAAIlC,UAAW,YAAYoC,IAAKF,EAAKE,KAEnC,yBAAKpC,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SAAS8C,IAAKC,IAAkBC,IAAI,YAGrD,yBAAKhD,UAAU,OACb,yBAAK4C,QAAS,kBAAM,EAAKpB,aAAaU,EAAKE,OAAM,uBAAGa,MAAM,iBAAmB,0BAAMjD,UAAU,UAAhB,qBAC7E,uBAAGA,UAAU,cAAckC,EAAKG,cAWlD,kBAAC,EAAD,W,GA1HUpC,aCFEiD,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.950b83f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iphoneVectorMain.c3dc5e21.png\";","import firebase from 'firebase/app';\nimport 'firebase/database'; \n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBuAvHVa1GLPTJqANtRFZsk5casPB6GMvY\",\n    authDomain: \"music-app-project-five.firebaseapp.com\",\n    databaseURL: \"https://music-app-project-five.firebaseio.com\",\n    projectId: \"music-app-project-five\",\n    storageBucket: \"music-app-project-five.appspot.com\",\n    messagingSenderId: \"1053875605858\",\n    appId: \"1:1053875605858:web:4c937357c1c5bdd7fc9c3b\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase; ","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <div className=\"jason wrapper\">\n                    <h1>â€œIS THIS THE REAL LIFE?<div className=\"title\">IS THIS JUST FANTASY?\"</div></h1>\n                    <h2>Ever curious to learn about other people's favourite songs? Now's your chance! Share your favourite song below and scroll down to see it posted along with other entries!</h2>\n                <div className=\"icon\">\n                    <i className=\"bounce far fa-caret-square-down\"></i>\n                </div>\n            </div>\n        </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div className=\"footer wrapper\">\n                    <p>Created by <span><a href=\"http://www.redawaseem.com\">Reda Waseem</a></span> at <span><a href=\"https://junocollege.com/\">Juno College</a></span></p>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\n// Import of firebase Component\nimport firebase from './firebase';\n// Import Header Component\nimport Header from './Components/Header';\n// Import Footer Component\nimport Footer from './Components/Footer';\n// Import of iphones holding user input information\nimport iphoneVectorMain from './iphoneVectorMain.png';\n// Import of error styling \nimport swal from 'sweetalert';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      // Store user input to track new state: \n      userInput: '',\n      datas: [],\n    }\n    // Scroll reference\n    this.myRef = React.createRef();\n  }\n\n  // Create a firebase reference: \n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    // Default listener used to listen to value change: \n    dbRef.on('value', (response) => {\n    // Empty array to store in state: \n      const newState = [];\n    // Storing object into a variable: \n      const data = response.val();\n\n      for (const key in data) {\n        newState.push({\n          key: key, \n          jam: data[key],\n        })\n      }\n\n      // Update our React state for data\n      this.setState({\n        datas: newState, \n      })\n    });\n  }\n\n  // Retrieve user input and update the userInput state: \n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value, \n    })\n  }\n\n  // Function created for scroll from \"let's jam\" button to entry\n  scrollToMyRef = () => {\n    window.scrollTo(0, this.myRef.current.offsetTop)\n  }\n\n\n  // Stop page refresh, take user input and store it into Firebase and then reset the input field:\n  handleClick = (event) => {\n    event.preventDefault();\n\n    // Error handling for empty textarea\n    if (this.state.userInput !== '') {\n      // Open portal to Firebase\n      const dbRef = firebase.database().ref();\n      // Add new record to Firebase\n      dbRef.push(this.state.userInput);\n      // Reset input field\n      this.setState({\n        userInput:'',\n      });\n      // Calling the scroll function \n      this.scrollToMyRef()\n\n    } else {\n      swal('Wait a sec! We wanna dance too! Please write your answer to the question in the box!')\n    }\n  };\n\n  // STRETCH GOAL: Removal of entry\n  // Retrieve the specific data key and remove from Firebase (and website):\n  handleRemove = (dataKey) => {\n    // Open portal to Firebase\n    const dbRef = firebase.database().ref();\n    // Remove data stored in key\n    dbRef.child(dataKey).remove(); \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <Header />\n\n        <section className=\"entries\">\n          <div className=\"wrapper\">\n            <form className=\"submit\" action=\"\">\n              \n              <label htmlFor=\"newEntry\"></label>\n              \n              <textarea placeholder=\"Write your favourite song here...\" id=\"newJam\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n              \n              <button className=\"jam\" onClick={this.handleClick}>LET'S JAM!</button>\n\n            </form>\n\n              <ul ref={this.myRef} className=\"listOfEntries\">\n                {this.state.datas.map((data) => {\n                  return(\n                    <li className =\"listStyle\" key={data.key}>\n\n                      <div className=\"container\">\n                        <div className=\"bottom\">\n                          <img className=\"iphone\" src={iphoneVectorMain} alt=\"iphone\" />\n                        </div>\n\n                        <div className=\"top\">\n                          <div onClick={() => this.handleRemove(data.key)}><i class=\"fas fa-trash\"></i><span className=\"remove\"> Click to Remove</span></div>\n                          <p className=\"userAnswer\">{data.jam}</p>\n                        </div>\n                      </div>\n\n                    </li>\n                  )\n                })}\n              </ul>\n          </div>\n        </section>\n\n        <Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}